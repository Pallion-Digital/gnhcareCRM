/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUnitArgs } from "./CreateUnitArgs";
import { UpdateUnitArgs } from "./UpdateUnitArgs";
import { DeleteUnitArgs } from "./DeleteUnitArgs";
import { UnitFindManyArgs } from "./UnitFindManyArgs";
import { UnitFindUniqueArgs } from "./UnitFindUniqueArgs";
import { Unit } from "./Unit";
import { ChildProfile } from "../../childProfile/base/ChildProfile";
import { UnitService } from "../unit.service";

@graphql.Resolver(() => Unit)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UnitResolverBase {
  constructor(
    protected readonly service: UnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async _unitsMeta(
    @graphql.Args() args: UnitFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Unit])
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async units(@graphql.Args() args: UnitFindManyArgs): Promise<Unit[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Unit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "own",
  })
  async unit(@graphql.Args() args: UnitFindUniqueArgs): Promise<Unit | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Unit)
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "create",
    possession: "any",
  })
  async createUnit(@graphql.Args() args: CreateUnitArgs): Promise<Unit> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        childProfile: args.data.childProfile
          ? {
              connect: args.data.childProfile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Unit)
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "update",
    possession: "any",
  })
  async updateUnit(@graphql.Args() args: UpdateUnitArgs): Promise<Unit | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          childProfile: args.data.childProfile
            ? {
                connect: args.data.childProfile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Unit)
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "delete",
    possession: "any",
  })
  async deleteUnit(@graphql.Args() args: DeleteUnitArgs): Promise<Unit | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ChildProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "read",
    possession: "any",
  })
  async childProfile(
    @graphql.Parent() parent: Unit
  ): Promise<ChildProfile | null> {
    const result = await this.service.getChildProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
