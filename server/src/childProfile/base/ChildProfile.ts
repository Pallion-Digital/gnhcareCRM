/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumChildProfileFloatingSupport } from "./EnumChildProfileFloatingSupport";
import { EnumChildProfileGender } from "./EnumChildProfileGender";
import { LocalAuthority } from "../../localAuthority/base/LocalAuthority";
import { EnumChildProfileSemiIndependentLiving } from "./EnumChildProfileSemiIndependentLiving";
import { Unit } from "../../unit/base/Unit";
@ObjectType()
class ChildProfile {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  allergies!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  clientName!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumChildProfileFloatingSupport,
  })
  @IsEnum(EnumChildProfileFloatingSupport)
  @IsOptional()
  @Field(() => EnumChildProfileFloatingSupport, {
    nullable: true,
  })
  floatingSupport?: "Yes" | "No" | null;

  @ApiProperty({
    required: false,
    enum: EnumChildProfileGender,
  })
  @IsEnum(EnumChildProfileGender)
  @IsOptional()
  @Field(() => EnumChildProfileGender, {
    nullable: true,
  })
  gender?: "Male" | "Female" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [LocalAuthority],
  })
  @ValidateNested()
  @Type(() => LocalAuthority)
  @IsOptional()
  localAuthorities?: Array<LocalAuthority>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nameOfKeyWorker!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumChildProfileSemiIndependentLiving,
  })
  @IsEnum(EnumChildProfileSemiIndependentLiving)
  @IsOptional()
  @Field(() => EnumChildProfileSemiIndependentLiving, {
    nullable: true,
  })
  semiIndependentLiving?: "Yes" | "No" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [Unit],
  })
  @ValidateNested()
  @Type(() => Unit)
  @IsOptional()
  units?: Array<Unit>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { ChildProfile };
