/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateChildProfileArgs } from "./CreateChildProfileArgs";
import { UpdateChildProfileArgs } from "./UpdateChildProfileArgs";
import { DeleteChildProfileArgs } from "./DeleteChildProfileArgs";
import { ChildProfileFindManyArgs } from "./ChildProfileFindManyArgs";
import { ChildProfileFindUniqueArgs } from "./ChildProfileFindUniqueArgs";
import { ChildProfile } from "./ChildProfile";
import { LocalAuthorityFindManyArgs } from "../../localAuthority/base/LocalAuthorityFindManyArgs";
import { LocalAuthority } from "../../localAuthority/base/LocalAuthority";
import { UnitFindManyArgs } from "../../unit/base/UnitFindManyArgs";
import { Unit } from "../../unit/base/Unit";
import { ChildProfileService } from "../childProfile.service";

@graphql.Resolver(() => ChildProfile)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ChildProfileResolverBase {
  constructor(
    protected readonly service: ChildProfileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "read",
    possession: "any",
  })
  async _childProfilesMeta(
    @graphql.Args() args: ChildProfileFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChildProfile])
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "read",
    possession: "any",
  })
  async childProfiles(
    @graphql.Args() args: ChildProfileFindManyArgs
  ): Promise<ChildProfile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChildProfile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "read",
    possession: "own",
  })
  async childProfile(
    @graphql.Args() args: ChildProfileFindUniqueArgs
  ): Promise<ChildProfile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChildProfile)
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "create",
    possession: "any",
  })
  async createChildProfile(
    @graphql.Args() args: CreateChildProfileArgs
  ): Promise<ChildProfile> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChildProfile)
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "update",
    possession: "any",
  })
  async updateChildProfile(
    @graphql.Args() args: UpdateChildProfileArgs
  ): Promise<ChildProfile | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChildProfile)
  @nestAccessControl.UseRoles({
    resource: "ChildProfile",
    action: "delete",
    possession: "any",
  })
  async deleteChildProfile(
    @graphql.Args() args: DeleteChildProfileArgs
  ): Promise<ChildProfile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LocalAuthority])
  @nestAccessControl.UseRoles({
    resource: "LocalAuthority",
    action: "read",
    possession: "any",
  })
  async localAuthorities(
    @graphql.Parent() parent: ChildProfile,
    @graphql.Args() args: LocalAuthorityFindManyArgs
  ): Promise<LocalAuthority[]> {
    const results = await this.service.findLocalAuthorities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Unit])
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async units(
    @graphql.Parent() parent: ChildProfile,
    @graphql.Args() args: UnitFindManyArgs
  ): Promise<Unit[]> {
    const results = await this.service.findUnits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
